#ruledef
{
	brk => 0x00
	mul r0, {imm: u16} => 0x01 @ le(imm)
	mul r0, r1 => 0x02
	div r0, {imm: u16} => 0x03 @ le(imm)
	div r0, r1 => 0x04
	ret => 0x05
	sys {imm: u8} => 0x06 @ imm
	mix => 0x07
	nop => 0x08
	mov sp, {imm: u16} => 0x09 @ le(imm)
	mov r0, sp => 0x0a
	mov sp, r0 => 0x0b
	unmix => 0x0c
	reserved4 => 0x0d
	shl r0 => 0x0e
	shr r0 => 0x0f
    mov r0, {imm: u16} => 0x10 @ le(imm)
	mov r1, {imm: u16} => 0x11 @ le(imm)
	mov r2, {imm: u16} => 0x12 @ le(imm)
	mov r3, {imm: u16} => 0x13 @ le(imm)
	mov r0, r0         => 0x20
	mov r0, r1         => 0x21
	mov r0, r2         => 0x22
	mov r0, r3         => 0x23
	mov r1, r0         => 0x24
	mov r1, r1         => 0x25
	mov r1, r2         => 0x26
	mov r1, r3         => 0x27
	mov r2, r0         => 0x28
	mov r2, r1         => 0x29
	mov r2, r2         => 0x2a
	mov r2, r3         => 0x2b
	mov r3, r0         => 0x2c
	mov r3, r1         => 0x2d
	mov r3, r2         => 0x2e
	mov r3, r3         => 0x2f
	add r0, r0         => 0x30
	add r0, r1         => 0x31
	add r0, r2         => 0x32
	add r0, r3         => 0x33
	add r1, r0         => 0x34
	add r1, r1         => 0x35
	add r1, r2         => 0x36
	add r1, r3         => 0x37
	add r2, r0         => 0x38
	add r2, r1         => 0x39
	add r2, r2         => 0x3a
	add r2, r3         => 0x3b
	add r3, r0         => 0x3c
	add r3, r1         => 0x3d
	add r3, r2         => 0x3e
	add r3, r3         => 0x3f
	mov r0, byte [r0]         => 0x40
	mov r0, byte [r1]         => 0x41
	mov r0, byte [r2]         => 0x42
	mov r0, byte [r3]         => 0x43
	mov r1, byte [r0]         => 0x44
	mov r1, byte [r1]         => 0x45
	mov r1, byte [r2]         => 0x46
	mov r1, byte [r3]         => 0x47
	mov r2, byte [r0]         => 0x48
	mov r2, byte [r1]         => 0x49
	mov r2, byte [r2]         => 0x4a
	mov r2, byte [r3]         => 0x4b
	mov r3, byte [r0]         => 0x4c
	mov r3, byte [r1]         => 0x4d
	mov r3, byte [r2]         => 0x4e
	mov r3, byte [r3]         => 0x4f
	mov r0, word [r0]         => 0x50
	mov r0, word [r1]         => 0x51
	mov r0, word [r2]         => 0x52
	mov r0, word [r3]         => 0x53
	mov r1, word [r0]         => 0x54
	mov r1, word [r1]         => 0x55
	mov r1, word [r2]         => 0x56
	mov r1, word [r3]         => 0x57
	mov r2, word [r0]         => 0x58
	mov r2, word [r1]         => 0x59
	mov r2, word [r2]         => 0x5a
	mov r2, word [r3]         => 0x5b
	mov r3, word [r0]         => 0x5c
	mov r3, word [r1]         => 0x5d
	mov r3, word [r2]         => 0x5e
	mov r3, word [r3]         => 0x5f
	mov byte [r0], r0         => 0x60
	mov byte [r0], r1         => 0x61
	mov byte [r0], r2         => 0x62
	mov byte [r0], r3         => 0x63
	mov byte [r1], r0         => 0x64
	mov byte [r1], r1         => 0x65
	mov byte [r1], r2         => 0x66
	mov byte [r1], r3         => 0x67
	mov byte [r2], r0         => 0x68
	mov byte [r2], r1         => 0x69
	mov byte [r2], r2         => 0x6a
	mov byte [r2], r3         => 0x6b
	mov byte [r3], r0         => 0x6c
	mov byte [r3], r1         => 0x6d
	mov byte [r3], r2         => 0x6e
	mov byte [r3], r3         => 0x6f
	mov word [r0], r0         => 0x70
	mov word [r0], r1         => 0x71
	mov word [r0], r2         => 0x72
	mov word [r0], r3         => 0x73
	mov word [r1], r0         => 0x74
	mov word [r1], r1         => 0x75
	mov word [r1], r2         => 0x76
	mov word [r1], r3         => 0x77
	mov word [r2], r0         => 0x78
	mov word [r2], r1         => 0x79
	mov word [r2], r2         => 0x7a
	mov word [r2], r3         => 0x7b
	mov word [r3], r0         => 0x7c
	mov word [r3], r1         => 0x7d
	mov word [r3], r2         => 0x7e
	mov word [r3], r3         => 0x7f
	test r0, r0         => 0x80
	test r0, r1         => 0x81
	test r0, r2         => 0x82
	test r0, r3         => 0x83
	test r1, r0         => 0x84
	test r1, r1         => 0x85
	test r1, r2         => 0x86
	test r1, r3         => 0x87
	test r2, r0         => 0x88
	test r2, r1         => 0x89
	test r2, r2         => 0x8a
	test r2, r3         => 0x8b
	test r3, r0         => 0x8c
	test r3, r1         => 0x8d
	test r3, r2         => 0x8e
	test r3, r3         => 0x8f
	push r0 => 0x90
	push r1 => 0x91
	push r2 => 0x92
	push r3 => 0x93
	pop r0 => 0x94
	pop r1 => 0x95
	pop r2 => 0x96
	pop r3 => 0x97
	jmp {addr: u16} => 0x98 @ le(addr)
	call {addr: u16} => 0x99 @ le(addr)
	jlt {addr: u16} => 0x9a @ le(addr)
	jgt {addr: u16} => 0x9b @ le(addr)
	jeq {addr: u16} => 0x9c @ le(addr)
	jne {addr: u16} => 0x9d @ le(addr)
	clt {addr: u16} => 0x9e @ le(addr)
	cgt {addr: u16} => 0x9f @ le(addr)
	ceq {addr: u16} => 0xa0 @ le(addr)
	cne {addr: u16} => 0xa1 @ le(addr)
    test r0, {imm: u16} => 0xa2 @ le(imm)
	test r1, {imm: u16} => 0xa3 @ le(imm)
	test r2, {imm: u16} => 0xa4 @ le(imm)
	test r3, {imm: u16} => 0xa5 @ le(imm)
    push sp => 0xa6
    push ip => 0xa7
	inc r0 => 0xa8
	inc r1 => 0xa9
	inc r2 => 0xaa
	inc r3 => 0xab
	dec r0 => 0xac
	dec r1 => 0xad
	dec r2 => 0xae
	dec r3 => 0xaf
    mov r0, byte [{imm: u16}] => 0xb0 @ le(imm)
    mov r1, byte [{imm: u16}] => 0xb1 @ le(imm)
    mov r2, byte [{imm: u16}] => 0xb2 @ le(imm)
    mov r3, byte [{imm: u16}] => 0xb3 @ le(imm)
    mov r0, word [{imm: u16}] => 0xb4 @ le(imm)
    mov r1, word [{imm: u16}] => 0xb5 @ le(imm)
    mov r2, word [{imm: u16}] => 0xb6 @ le(imm)
    mov r3, word [{imm: u16}] => 0xb7 @ le(imm)
    mov byte [{imm: u16}], r0 => 0xb8 @ le(imm)
    mov byte [{imm: u16}], r1 => 0xb9 @ le(imm)
    mov byte [{imm: u16}], r2 => 0xba @ le(imm)
    mov byte [{imm: u16}], r3 => 0xbb @ le(imm)
    mov word [{imm: u16}], r0 => 0xbc @ le(imm)
    mov word [{imm: u16}], r1 => 0xbd @ le(imm)
    mov word [{imm: u16}], r2 => 0xbe @ le(imm)
    mov word [{imm: u16}], r3 => 0xbf @ le(imm)
    push {imm: u16} => 0xc4 @ le(imm)
    jmp r0 => 0xc5
    jmp r1 => 0xc6
    jmp r2 => 0xc7
    jmp r3 => 0xc8
    call r0 => 0xc9
    call r1 => 0xca
    call r2 => 0xcb
    call r3 => 0xcc
	and r0, {imm: u16} => 0xcd @ le(imm)
	or r0, {imm: u16} => 0xce @ le(imm)
	xor r0, {imm: u16} => 0xcf @ le(imm)
	and r0, r0 => 0xd0
    and r0, r1 => 0xd1
    and r0, r2 => 0xd2
    and r0, r3 => 0xd3
	or r0, r0 => 0xd4
    or r0, r1 => 0xd5
    or r0, r2 => 0xd6
    or r0, r3 => 0xd7
	xor r0, r0 => 0xd8
    xor r0, r1 => 0xd9
    xor r0, r2 => 0xda
    xor r0, r3 => 0xdb
    bswap r0 => 0xdc
    bswap r1 => 0xdd
    bswap r2 => 0xde
    bswap r3 => 0xdf
	add r0, {imm: u16} => 0xe0 @ le(imm)
    add r1, {imm: u16} => 0xe1 @ le(imm)
    add r2, {imm: u16} => 0xe2 @ le(imm)
    add r3, {imm: u16} => 0xe3 @ le(imm)
}

#fn dw(x) => ((x&0xff)<<8) | (x>>8)
